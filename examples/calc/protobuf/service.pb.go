// Code generated by protoc-gen-go. DO NOT EDIT.
// source: examples/calc/protobuf/service.proto

/*
Package esp4g_calc is a generated protocol buffer package.

It is generated from these files:
	examples/calc/protobuf/service.proto

It has these top-level messages:
	Operand
	OperandList
	Sum
*/
package esp4g_calc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Operand struct {
	X int64 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y int64 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
}

func (m *Operand) Reset()                    { *m = Operand{} }
func (m *Operand) String() string            { return proto.CompactTextString(m) }
func (*Operand) ProtoMessage()               {}
func (*Operand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Operand) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Operand) GetY() int64 {
	if m != nil {
		return m.Y
	}
	return 0
}

type OperandList struct {
	Operand []*Operand `protobuf:"bytes,1,rep,name=operand" json:"operand,omitempty"`
}

func (m *OperandList) Reset()                    { *m = OperandList{} }
func (m *OperandList) String() string            { return proto.CompactTextString(m) }
func (*OperandList) ProtoMessage()               {}
func (*OperandList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OperandList) GetOperand() []*Operand {
	if m != nil {
		return m.Operand
	}
	return nil
}

type Sum struct {
	Z int64 `protobuf:"varint,3,opt,name=z" json:"z,omitempty"`
}

func (m *Sum) Reset()                    { *m = Sum{} }
func (m *Sum) String() string            { return proto.CompactTextString(m) }
func (*Sum) ProtoMessage()               {}
func (*Sum) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Sum) GetZ() int64 {
	if m != nil {
		return m.Z
	}
	return 0
}

func init() {
	proto.RegisterType((*Operand)(nil), "esp4g.calc.Operand")
	proto.RegisterType((*OperandList)(nil), "esp4g.calc.OperandList")
	proto.RegisterType((*Sum)(nil), "esp4g.calc.Sum")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CalcService service

type CalcServiceClient interface {
	AddAll(ctx context.Context, opts ...grpc.CallOption) (CalcService_AddAllClient, error)
	AddDeffered(ctx context.Context, in *OperandList, opts ...grpc.CallOption) (CalcService_AddDefferedClient, error)
	AddAsync(ctx context.Context, opts ...grpc.CallOption) (CalcService_AddAsyncClient, error)
}

type calcServiceClient struct {
	cc *grpc.ClientConn
}

func NewCalcServiceClient(cc *grpc.ClientConn) CalcServiceClient {
	return &calcServiceClient{cc}
}

func (c *calcServiceClient) AddAll(ctx context.Context, opts ...grpc.CallOption) (CalcService_AddAllClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CalcService_serviceDesc.Streams[0], c.cc, "/esp4g.calc.CalcService/AddAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &calcServiceAddAllClient{stream}
	return x, nil
}

type CalcService_AddAllClient interface {
	Send(*Operand) error
	CloseAndRecv() (*Sum, error)
	grpc.ClientStream
}

type calcServiceAddAllClient struct {
	grpc.ClientStream
}

func (x *calcServiceAddAllClient) Send(m *Operand) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calcServiceAddAllClient) CloseAndRecv() (*Sum, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Sum)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calcServiceClient) AddDeffered(ctx context.Context, in *OperandList, opts ...grpc.CallOption) (CalcService_AddDefferedClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CalcService_serviceDesc.Streams[1], c.cc, "/esp4g.calc.CalcService/AddDeffered", opts...)
	if err != nil {
		return nil, err
	}
	x := &calcServiceAddDefferedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalcService_AddDefferedClient interface {
	Recv() (*Sum, error)
	grpc.ClientStream
}

type calcServiceAddDefferedClient struct {
	grpc.ClientStream
}

func (x *calcServiceAddDefferedClient) Recv() (*Sum, error) {
	m := new(Sum)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calcServiceClient) AddAsync(ctx context.Context, opts ...grpc.CallOption) (CalcService_AddAsyncClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CalcService_serviceDesc.Streams[2], c.cc, "/esp4g.calc.CalcService/AddAsync", opts...)
	if err != nil {
		return nil, err
	}
	x := &calcServiceAddAsyncClient{stream}
	return x, nil
}

type CalcService_AddAsyncClient interface {
	Send(*Operand) error
	Recv() (*Sum, error)
	grpc.ClientStream
}

type calcServiceAddAsyncClient struct {
	grpc.ClientStream
}

func (x *calcServiceAddAsyncClient) Send(m *Operand) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calcServiceAddAsyncClient) Recv() (*Sum, error) {
	m := new(Sum)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CalcService service

type CalcServiceServer interface {
	AddAll(CalcService_AddAllServer) error
	AddDeffered(*OperandList, CalcService_AddDefferedServer) error
	AddAsync(CalcService_AddAsyncServer) error
}

func RegisterCalcServiceServer(s *grpc.Server, srv CalcServiceServer) {
	s.RegisterService(&_CalcService_serviceDesc, srv)
}

func _CalcService_AddAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalcServiceServer).AddAll(&calcServiceAddAllServer{stream})
}

type CalcService_AddAllServer interface {
	SendAndClose(*Sum) error
	Recv() (*Operand, error)
	grpc.ServerStream
}

type calcServiceAddAllServer struct {
	grpc.ServerStream
}

func (x *calcServiceAddAllServer) SendAndClose(m *Sum) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calcServiceAddAllServer) Recv() (*Operand, error) {
	m := new(Operand)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CalcService_AddDeffered_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OperandList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalcServiceServer).AddDeffered(m, &calcServiceAddDefferedServer{stream})
}

type CalcService_AddDefferedServer interface {
	Send(*Sum) error
	grpc.ServerStream
}

type calcServiceAddDefferedServer struct {
	grpc.ServerStream
}

func (x *calcServiceAddDefferedServer) Send(m *Sum) error {
	return x.ServerStream.SendMsg(m)
}

func _CalcService_AddAsync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalcServiceServer).AddAsync(&calcServiceAddAsyncServer{stream})
}

type CalcService_AddAsyncServer interface {
	Send(*Sum) error
	Recv() (*Operand, error)
	grpc.ServerStream
}

type calcServiceAddAsyncServer struct {
	grpc.ServerStream
}

func (x *calcServiceAddAsyncServer) Send(m *Sum) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calcServiceAddAsyncServer) Recv() (*Operand, error) {
	m := new(Operand)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CalcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "esp4g.calc.CalcService",
	HandlerType: (*CalcServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddAll",
			Handler:       _CalcService_AddAll_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AddDeffered",
			Handler:       _CalcService_AddDeffered_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddAsync",
			Handler:       _CalcService_AddAsync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "examples/calc/protobuf/service.proto",
}

// Client API for HealthCheckService service

type HealthCheckServiceClient interface {
	Check(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type healthCheckServiceClient struct {
	cc *grpc.ClientConn
}

func NewHealthCheckServiceClient(cc *grpc.ClientConn) HealthCheckServiceClient {
	return &healthCheckServiceClient{cc}
}

func (c *healthCheckServiceClient) Check(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/esp4g.calc.HealthCheckService/Check", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HealthCheckService service

type HealthCheckServiceServer interface {
	Check(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
}

func RegisterHealthCheckServiceServer(s *grpc.Server, srv HealthCheckServiceServer) {
	s.RegisterService(&_HealthCheckService_serviceDesc, srv)
}

func _HealthCheckService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esp4g.calc.HealthCheckService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckServiceServer).Check(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _HealthCheckService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "esp4g.calc.HealthCheckService",
	HandlerType: (*HealthCheckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _HealthCheckService_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "examples/calc/protobuf/service.proto",
}

func init() { proto.RegisterFile("examples/calc/protobuf/service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x14, 0xc4, 0xbb, 0x06, 0x5b, 0x79, 0x11, 0x84, 0x2d, 0x68, 0x88, 0x97, 0x12, 0x14, 0x72, 0x71,
	0x53, 0xa2, 0x08, 0xa2, 0x97, 0x50, 0x05, 0x0f, 0x42, 0xa1, 0xf9, 0x04, 0xe9, 0xee, 0x4b, 0x5a,
	0xdc, 0x34, 0x21, 0x7f, 0x24, 0xe9, 0x07, 0xf3, 0xf3, 0xc9, 0x66, 0x1b, 0xea, 0x21, 0x82, 0xc7,
	0x19, 0x7e, 0xef, 0xcd, 0x30, 0x70, 0x83, 0x4d, 0x94, 0xe6, 0x12, 0x4b, 0x8f, 0x47, 0x92, 0x7b,
	0x79, 0x91, 0x55, 0xd9, 0xba, 0x8e, 0xbd, 0x12, 0x8b, 0xaf, 0x2d, 0x47, 0xd6, 0x19, 0x14, 0xb0,
	0xcc, 0x1f, 0x12, 0xa6, 0x10, 0xfb, 0x3a, 0xc9, 0xb2, 0x44, 0xe2, 0x11, 0xc5, 0x34, 0xaf, 0x5a,
	0x0d, 0x3a, 0xb7, 0x30, 0x59, 0xe6, 0x58, 0x44, 0x3b, 0x41, 0xcf, 0x81, 0x34, 0x16, 0x99, 0x11,
	0xd7, 0x58, 0x91, 0x46, 0xa9, 0xd6, 0x3a, 0xd1, 0xaa, 0x75, 0x5e, 0xc0, 0x3c, 0x60, 0x1f, 0xdb,
	0xb2, 0xa2, 0x77, 0x30, 0xc9, 0xb4, 0xb4, 0xc8, 0xcc, 0x70, 0x4d, 0x7f, 0xca, 0x8e, 0x81, 0xec,
	0x40, 0xae, 0x7a, 0xc6, 0x99, 0x82, 0x11, 0xd6, 0xa9, 0x7a, 0xb9, 0xb7, 0x0c, 0xfd, 0x72, 0xef,
	0x7f, 0x13, 0x30, 0x17, 0x91, 0xe4, 0xa1, 0x2e, 0x4e, 0x7d, 0x18, 0x07, 0x42, 0x04, 0x52, 0xd2,
	0xa1, 0x67, 0xf6, 0xc5, 0x6f, 0x33, 0xac, 0x53, 0x67, 0xe4, 0x12, 0xfa, 0x0c, 0x66, 0x20, 0xc4,
	0x2b, 0xc6, 0x31, 0x16, 0x28, 0xe8, 0xd5, 0xc0, 0xa1, 0xea, 0x3b, 0x70, 0x3c, 0x27, 0xf4, 0x11,
	0xce, 0x54, 0x60, 0xd9, 0xee, 0xf8, 0xff, 0x23, 0xe7, 0xc4, 0x5f, 0x02, 0x7d, 0xc7, 0x48, 0x56,
	0x9b, 0xc5, 0x06, 0xf9, 0x67, 0x5f, 0xff, 0x09, 0x4e, 0x3b, 0x4d, 0x2f, 0x99, 0xde, 0x9b, 0xf5,
	0x7b, 0xb3, 0x37, 0xb5, 0xb7, 0xfd, 0x87, 0xef, 0x8c, 0xd6, 0xe3, 0xce, 0xb9, 0xff, 0x09, 0x00,
	0x00, 0xff, 0xff, 0x67, 0x37, 0x74, 0xfe, 0xdb, 0x01, 0x00, 0x00,
}
