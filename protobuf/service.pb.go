// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protobuf/service.proto

/*
Package eps4g_extension is a generated protocol buffer package.

It is generated from these files:
	protobuf/service.proto

It has these top-level messages:
	GrpcAccess
	UnaryAccessLog
	StreamAccessLog
	AccessIdentity
	AccessControl
*/
package eps4g_extension

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import google_protobuf1 "github.com/golang/protobuf/ptypes/duration"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AccessPolicy int32

const (
	AccessPolicy_ALLOW AccessPolicy = 0
	AccessPolicy_DENY  AccessPolicy = 1
)

var AccessPolicy_name = map[int32]string{
	0: "ALLOW",
	1: "DENY",
}
var AccessPolicy_value = map[string]int32{
	"ALLOW": 0,
	"DENY":  1,
}

func (x AccessPolicy) String() string {
	return proto.EnumName(AccessPolicy_name, int32(x))
}
func (AccessPolicy) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GrpcAccess struct {
	Method       string                     `protobuf:"bytes,1,opt,name=method" json:"method,omitempty"`
	Status       string                     `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Authority    []string                   `protobuf:"bytes,3,rep,name=authority" json:"authority,omitempty"`
	UserAgent    []string                   `protobuf:"bytes,4,rep,name=user_agent,json=userAgent" json:"user_agent,omitempty"`
	ResponseTime *google_protobuf1.Duration `protobuf:"bytes,5,opt,name=response_time,json=responseTime" json:"response_time,omitempty"`
}

func (m *GrpcAccess) Reset()                    { *m = GrpcAccess{} }
func (m *GrpcAccess) String() string            { return proto.CompactTextString(m) }
func (*GrpcAccess) ProtoMessage()               {}
func (*GrpcAccess) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GrpcAccess) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *GrpcAccess) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *GrpcAccess) GetAuthority() []string {
	if m != nil {
		return m.Authority
	}
	return nil
}

func (m *GrpcAccess) GetUserAgent() []string {
	if m != nil {
		return m.UserAgent
	}
	return nil
}

func (m *GrpcAccess) GetResponseTime() *google_protobuf1.Duration {
	if m != nil {
		return m.ResponseTime
	}
	return nil
}

type UnaryAccessLog struct {
	Access            *GrpcAccess `protobuf:"bytes,1,opt,name=access" json:"access,omitempty"`
	RequestBytesSize  int64       `protobuf:"varint,2,opt,name=request_bytes_size,json=requestBytesSize" json:"request_bytes_size,omitempty"`
	ResponseBytesSize int64       `protobuf:"varint,3,opt,name=response_bytes_size,json=responseBytesSize" json:"response_bytes_size,omitempty"`
}

func (m *UnaryAccessLog) Reset()                    { *m = UnaryAccessLog{} }
func (m *UnaryAccessLog) String() string            { return proto.CompactTextString(m) }
func (*UnaryAccessLog) ProtoMessage()               {}
func (*UnaryAccessLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UnaryAccessLog) GetAccess() *GrpcAccess {
	if m != nil {
		return m.Access
	}
	return nil
}

func (m *UnaryAccessLog) GetRequestBytesSize() int64 {
	if m != nil {
		return m.RequestBytesSize
	}
	return 0
}

func (m *UnaryAccessLog) GetResponseBytesSize() int64 {
	if m != nil {
		return m.ResponseBytesSize
	}
	return 0
}

type StreamAccessLog struct {
	Access *GrpcAccess `protobuf:"bytes,1,opt,name=access" json:"access,omitempty"`
}

func (m *StreamAccessLog) Reset()                    { *m = StreamAccessLog{} }
func (m *StreamAccessLog) String() string            { return proto.CompactTextString(m) }
func (*StreamAccessLog) ProtoMessage()               {}
func (*StreamAccessLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StreamAccessLog) GetAccess() *GrpcAccess {
	if m != nil {
		return m.Access
	}
	return nil
}

type AccessIdentity struct {
	Method string   `protobuf:"bytes,1,opt,name=method" json:"method,omitempty"`
	ApiKey []string `protobuf:"bytes,2,rep,name=api_key,json=apiKey" json:"api_key,omitempty"`
}

func (m *AccessIdentity) Reset()                    { *m = AccessIdentity{} }
func (m *AccessIdentity) String() string            { return proto.CompactTextString(m) }
func (*AccessIdentity) ProtoMessage()               {}
func (*AccessIdentity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AccessIdentity) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *AccessIdentity) GetApiKey() []string {
	if m != nil {
		return m.ApiKey
	}
	return nil
}

type AccessControl struct {
	Policy AccessPolicy `protobuf:"varint,1,opt,name=policy,enum=eps4g.extension.AccessPolicy" json:"policy,omitempty"`
}

func (m *AccessControl) Reset()                    { *m = AccessControl{} }
func (m *AccessControl) String() string            { return proto.CompactTextString(m) }
func (*AccessControl) ProtoMessage()               {}
func (*AccessControl) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AccessControl) GetPolicy() AccessPolicy {
	if m != nil {
		return m.Policy
	}
	return AccessPolicy_ALLOW
}

func init() {
	proto.RegisterType((*GrpcAccess)(nil), "eps4g.extension.GrpcAccess")
	proto.RegisterType((*UnaryAccessLog)(nil), "eps4g.extension.UnaryAccessLog")
	proto.RegisterType((*StreamAccessLog)(nil), "eps4g.extension.StreamAccessLog")
	proto.RegisterType((*AccessIdentity)(nil), "eps4g.extension.AccessIdentity")
	proto.RegisterType((*AccessControl)(nil), "eps4g.extension.AccessControl")
	proto.RegisterEnum("eps4g.extension.AccessPolicy", AccessPolicy_name, AccessPolicy_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AccessLogService service

type AccessLogServiceClient interface {
	UnaryAccess(ctx context.Context, in *UnaryAccessLog, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	StreamAccess(ctx context.Context, in *StreamAccessLog, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type accessLogServiceClient struct {
	cc *grpc.ClientConn
}

func NewAccessLogServiceClient(cc *grpc.ClientConn) AccessLogServiceClient {
	return &accessLogServiceClient{cc}
}

func (c *accessLogServiceClient) UnaryAccess(ctx context.Context, in *UnaryAccessLog, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/eps4g.extension.AccessLogService/UnaryAccess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessLogServiceClient) StreamAccess(ctx context.Context, in *StreamAccessLog, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/eps4g.extension.AccessLogService/StreamAccess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccessLogService service

type AccessLogServiceServer interface {
	UnaryAccess(context.Context, *UnaryAccessLog) (*google_protobuf.Empty, error)
	StreamAccess(context.Context, *StreamAccessLog) (*google_protobuf.Empty, error)
}

func RegisterAccessLogServiceServer(s *grpc.Server, srv AccessLogServiceServer) {
	s.RegisterService(&_AccessLogService_serviceDesc, srv)
}

func _AccessLogService_UnaryAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryAccessLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessLogServiceServer).UnaryAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eps4g.extension.AccessLogService/UnaryAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessLogServiceServer).UnaryAccess(ctx, req.(*UnaryAccessLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessLogService_StreamAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamAccessLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessLogServiceServer).StreamAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eps4g.extension.AccessLogService/StreamAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessLogServiceServer).StreamAccess(ctx, req.(*StreamAccessLog))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccessLogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eps4g.extension.AccessLogService",
	HandlerType: (*AccessLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryAccess",
			Handler:    _AccessLogService_UnaryAccess_Handler,
		},
		{
			MethodName: "StreamAccess",
			Handler:    _AccessLogService_StreamAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/service.proto",
}

// Client API for AccessControlService service

type AccessControlServiceClient interface {
	Access(ctx context.Context, in *AccessIdentity, opts ...grpc.CallOption) (*AccessControl, error)
}

type accessControlServiceClient struct {
	cc *grpc.ClientConn
}

func NewAccessControlServiceClient(cc *grpc.ClientConn) AccessControlServiceClient {
	return &accessControlServiceClient{cc}
}

func (c *accessControlServiceClient) Access(ctx context.Context, in *AccessIdentity, opts ...grpc.CallOption) (*AccessControl, error) {
	out := new(AccessControl)
	err := grpc.Invoke(ctx, "/eps4g.extension.AccessControlService/Access", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccessControlService service

type AccessControlServiceServer interface {
	Access(context.Context, *AccessIdentity) (*AccessControl, error)
}

func RegisterAccessControlServiceServer(s *grpc.Server, srv AccessControlServiceServer) {
	s.RegisterService(&_AccessControlService_serviceDesc, srv)
}

func _AccessControlService_Access_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlServiceServer).Access(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eps4g.extension.AccessControlService/Access",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlServiceServer).Access(ctx, req.(*AccessIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccessControlService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eps4g.extension.AccessControlService",
	HandlerType: (*AccessControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Access",
			Handler:    _AccessControlService_Access_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/service.proto",
}

func init() { proto.RegisterFile("protobuf/service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 479 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x5f, 0x6f, 0xd3, 0x30,
	0x14, 0xc5, 0x9b, 0x75, 0x0b, 0xf4, 0xb6, 0xeb, 0x8a, 0x41, 0x25, 0x74, 0x6c, 0x54, 0xe1, 0xa5,
	0x42, 0x28, 0x93, 0x32, 0x78, 0x45, 0x2a, 0x6c, 0xe3, 0xcf, 0x2a, 0x40, 0x29, 0x08, 0xf1, 0x14,
	0xb9, 0xe9, 0x25, 0xb3, 0x68, 0xe2, 0x60, 0x3b, 0x88, 0xec, 0xeb, 0xf0, 0xc2, 0x57, 0xe0, 0xdb,
	0xa1, 0xd8, 0x69, 0xd7, 0x3f, 0xea, 0x13, 0x8f, 0x3e, 0xe7, 0xa7, 0xeb, 0xe3, 0x73, 0x0d, 0xdd,
	0x4c, 0x70, 0xc5, 0x27, 0xf9, 0xb7, 0x13, 0x89, 0xe2, 0x27, 0x8b, 0xd0, 0xd3, 0x02, 0x39, 0xc0,
	0x4c, 0x3e, 0x8b, 0x3d, 0xfc, 0xa5, 0x30, 0x95, 0x8c, 0xa7, 0xbd, 0xc3, 0x98, 0xf3, 0x78, 0x86,
	0x27, 0x0b, 0x1e, 0x93, 0x4c, 0x15, 0x86, 0xee, 0x1d, 0xaf, 0x9b, 0xd3, 0x5c, 0x50, 0xc5, 0x78,
	0x6a, 0x7c, 0xf7, 0xaf, 0x05, 0xf0, 0x5a, 0x64, 0xd1, 0x30, 0x8a, 0x50, 0x4a, 0xd2, 0x05, 0x3b,
	0x41, 0x75, 0xc5, 0xa7, 0x8e, 0xd5, 0xb7, 0x06, 0x8d, 0xa0, 0x3a, 0x95, 0xba, 0x54, 0x54, 0xe5,
	0xd2, 0xd9, 0x31, 0xba, 0x39, 0x91, 0x87, 0xd0, 0xa0, 0xb9, 0xba, 0xe2, 0x82, 0xa9, 0xc2, 0xa9,
	0xf7, 0xeb, 0x83, 0x46, 0x70, 0x23, 0x90, 0x23, 0x80, 0x5c, 0xa2, 0x08, 0x69, 0x8c, 0xa9, 0x72,
	0x76, 0x8d, 0x5d, 0x2a, 0xc3, 0x52, 0x20, 0x2f, 0x60, 0x5f, 0xa0, 0xcc, 0x78, 0x2a, 0x31, 0x54,
	0x2c, 0x41, 0x67, 0xaf, 0x6f, 0x0d, 0x9a, 0xfe, 0x03, 0xcf, 0x64, 0xf6, 0xe6, 0x99, 0xbd, 0xb3,
	0x2a, 0x73, 0xd0, 0x9a, 0xf3, 0x9f, 0x58, 0x82, 0xee, 0x6f, 0x0b, 0xda, 0x9f, 0x53, 0x2a, 0x0a,
	0x13, 0x7e, 0xc4, 0x63, 0x72, 0x0a, 0x36, 0xd5, 0x07, 0x9d, 0xbf, 0xe9, 0x1f, 0x7a, 0x6b, 0x6d,
	0x79, 0x37, 0x8f, 0x0d, 0x2a, 0x94, 0x3c, 0x05, 0x22, 0xf0, 0x47, 0x8e, 0x52, 0x85, 0x93, 0x42,
	0xa1, 0x0c, 0x25, 0xbb, 0x46, 0xfd, 0xd0, 0x7a, 0xd0, 0xa9, 0x9c, 0x97, 0xa5, 0x31, 0x66, 0xd7,
	0x48, 0x3c, 0xb8, 0xbb, 0x48, 0xbd, 0x84, 0xd7, 0x35, 0x7e, 0x67, 0x6e, 0x2d, 0x78, 0xf7, 0x02,
	0x0e, 0xc6, 0x4a, 0x20, 0x4d, 0xfe, 0x2f, 0xa5, 0x3b, 0x84, 0xb6, 0x51, 0xde, 0x4e, 0x31, 0x55,
	0x65, 0xbd, 0xdb, 0x96, 0x75, 0x1f, 0x6e, 0xd1, 0x8c, 0x85, 0xdf, 0xb1, 0x70, 0x76, 0x74, 0xe7,
	0x36, 0xcd, 0xd8, 0x25, 0x16, 0xee, 0x05, 0xec, 0x9b, 0x11, 0xaf, 0x78, 0xaa, 0x04, 0x9f, 0x91,
	0xe7, 0x60, 0x67, 0x7c, 0xc6, 0xa2, 0x42, 0x4f, 0x68, 0xfb, 0x47, 0x1b, 0x41, 0x0c, 0xff, 0x51,
	0x43, 0x41, 0x05, 0x3f, 0x79, 0x0c, 0xad, 0x65, 0x9d, 0x34, 0x60, 0x6f, 0x38, 0x1a, 0x7d, 0xf8,
	0xd2, 0xa9, 0x91, 0xdb, 0xb0, 0x7b, 0x76, 0xfe, 0xfe, 0x6b, 0xc7, 0xf2, 0xff, 0x58, 0xd0, 0x59,
	0x3c, 0x79, 0x6c, 0xbe, 0x30, 0x79, 0x03, 0xcd, 0xa5, 0x8d, 0x91, 0x47, 0x1b, 0xf7, 0xad, 0xee,
	0xb3, 0xd7, 0xdd, 0xf8, 0x0b, 0xe7, 0xe5, 0xe7, 0x76, 0x6b, 0xe4, 0x1d, 0xb4, 0x96, 0x6b, 0x25,
	0xfd, 0x8d, 0x51, 0x6b, 0xad, 0x6f, 0x9f, 0xe5, 0x47, 0x70, 0x6f, 0xa5, 0x97, 0x79, 0xda, 0x4b,
	0xb0, 0xb7, 0x06, 0x5d, 0xdd, 0x45, 0xef, 0x78, 0x0b, 0x50, 0x4d, 0x74, 0x6b, 0x13, 0x5b, 0x5f,
	0x7b, 0xfa, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xda, 0x23, 0x49, 0xb0, 0xd8, 0x03, 0x00, 0x00,
}
